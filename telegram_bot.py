import logging
from typing import Dict, Any

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class KidQuestBot:
    def __init__(self):
        self.user_states: Dict[int, Dict[str, Any]] = {}
        
    async def start(self, update, context):
        """Send welcome message when /start command is issued."""
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø KidQuestBot - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ "
            "–≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –¥–µ—Ç–µ–π!\n\n"
            "–ù–∞–ø–∏—à–∏ /new, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç!"
        )
        await update.message.reply_text(welcome_text)
        
    async def new_quest(self, update, context):
        """Initiate a new quest by asking for requirements."""
        user_id = update.effective_user.id
        
        # Clear any existing state for this user
        if user_id in self.user_states:
            del self.user_states[user_id]
            
        # Set initial state
        self.user_states[user_id] = {
            'quest_requirements': None,
            'current_quest': None,
            'current_step_id': None,
            'step_history': [],
            'quest_started': False
        }
        
        welcome_text = (
            "üåü –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –≤–º–µ—Å—Ç–µ –Ω–æ–≤—ã–π –∫–≤–µ—Å—Ç!\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ, –æ —á—ë–º –±—É–¥–µ—Ç —Ç–≤–æ–π –∫–≤–µ—Å—Ç: \n"
            "- –¢–µ–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –≤ –ª–µ—Å—É, –ø–æ–¥–≤–æ–¥–Ω–∞—è –∂–∏–∑–Ω—å, –∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ)\n"
            "- –ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: –º–∞–ª–µ–Ω—å–∫–∏–π –¥—Ä–∞–∫–æ–Ω, —É–º–Ω–∞—è –±–µ–ª–∫–∞, —Ä–æ–±–æ—Ç-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å)\n"
            "- –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∏–∑—É—á–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö, –æ—Å–Ω–æ–≤—ã –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏, –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —è–≤–ª–µ–Ω–∏—è)\n"
            "- –°–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –∫–≤–µ—Å—Ç–µ?\n\n"
            "–ü–∏—à–∏ –≤—Å—ë —Å–≤–æ–±–æ–¥–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º - —è —Å–¥–µ–ª–∞—é –∏–∑ —ç—Ç–æ–≥–æ –æ—Ç–ª–∏—á–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é!"
        )
        
        await update.message.reply_text(welcome_text)
        
    async def handle_requirements(self, update, context):
        """Handle user's requirements description for the quest."""
        user_id = update.effective_user.id
        
        if user_id not in self.user_states:
            # If no state exists, start a new quest
            await self.new_quest(update, context)
            return
            
        # Check if we already have requirements
        if self.user_states[user_id]['quest_requirements'] is not None:
            # This should be handled by the next step - processing the quest
            return
            
        # Store user's requirements description
        requirements = update.message.text
        
        try:
            logger.info(f"Generating quest for user {user_id} with requirements: {requirements}")
            
            from quest_engine import QuestEngine
            quest_engine = QuestEngine()
            
            # Create a temporary quest object to store in state
            quest_data = await quest_engine.generate_quest(requirements)
            
            if not quest_data:
                error_msg = "–ò–∑–≤–∏–Ω–∏, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–≤–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —Å –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏."
                await update.message.reply_text(error_msg)
                return
                
            # Store the generated quest in user state
            self.user_states[user_id]['quest_requirements'] = requirements
            self.user_states[user_id]['current_quest'] = quest_data
            
            # Start the quest from beginning
            start_step = quest_data['quest']['startStepId']
            self.user_states[user_id]['current_step_id'] = start_step
            self.user_states[user_id]['step_history'] = [start_step]
            self.user_states[user_id]['quest_started'] = True
            
            # Display first step
            await self.display_current_step(update, context)
            
        except Exception as e:
            logger.error(f"Error generating quest for user {user_id}: {str(e)}")
            error_msg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–≤–µ—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
            await update.message.reply_text(error_msg)
            
    async def display_current_step(self, update, context):
        """Display the current step of the quest."""
        user_id = update.effective_user.id
        if user_id not in self.user_states:
            return
            
        state = self.user_states[user_id]
        if not state['quest_started'] or not state['current_quest']:
            return
            
        # Get current step data
        quest_data = state['current_quest']
        steps_dict = {step['id']: step for step in quest_data['quest']['steps']}
        current_step = steps_dict.get(state['current_step_id'])
        
        if not current_step:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â–∏–π —à–∞–≥ –∫–≤–µ—Å—Ç–∞.")
            return
            
        # Format the message with options
        text = current_step['text']
        
        # Add emoji options for each choice
        if 'options' in current_step and len(current_step['options']) > 0:
            options_text = "\n"
            for i, option in enumerate(current_step['options'], 1):
                options_text += f"{option['emoji']} {option['text']}\n"
            
            text += f"\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:\n{options_text}"
        
        await update.message.reply_text(text)
        
    async def handle_choice(self, update, context):
        """Handle user's choice and proceed to next step."""
        user_id = update.effective_user.id
        
        if user_id not in self.user_states:
            await self.new_quest(update, context)
            return
            
        if not self.user_states[user_id]['quest_started']:
            # If quest hasn't started yet, treat as requirements
            await self.handle_requirements(update, context)
            return
            
        user_choice = update.message.text
        
        try:
            state = self.user_states[user_id]
            quest_data = state['current_quest']
            
            if not quest_data:
                await update.message.reply_text("–û—à–∏–±–∫–∞: –∫–≤–µ—Å—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
                return
                
            # Get current step data
            steps_dict = {step['id']: step for step in quest_data['quest']['steps']}
            current_step = steps_dict.get(state['current_step_id'])
            
            if not current_step:
                await update.message.reply_text("–û—à–∏–±–∫–∞: —Ç–µ–∫—É—â–∏–π —à–∞–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
                
            # Process the choice using QuestEngine
            from quest_engine import QuestEngine
            quest_engine = QuestEngine()
            
            next_step_id = await quest_engine.process_choice(current_step, user_choice, quest_data['quest']['steps'])
            
            if next_step_id:
                # Valid option found - proceed to next step
                state['current_step_id'] = next_step_id
                state['step_history'].append(next_step_id)
                
                # Display the new step
                await self.display_current_step(update, context)
            else:
                # No matching option - create a new branch
                logger.info(f"No matching option for user {user_id}, creating new branch...")
                new_step = await quest_engine.create_new_branch(current_step, user_choice, quest_data['quest']['steps'])
                
                if new_step:
                    # Add the new step to the quest data and proceed
                    quest_data['quest']['steps'].append(new_step)
                    state['current_step_id'] = new_step['id']
                    state['step_history'].append(new_step['id'])
                    
                    await self.display_current_step(update, context)
                else:
                    # If we can't create a new branch, just show an error
                    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω—è–ª —Ç–≤–æ–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
            
        except Exception as e:
            logger.error(f"Error processing choice for user {user_id}: {str(e)}")
            error_msg = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–≤–æ–µ–≥–æ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑."
            await update.message.reply_text(error_msg)

    async def go_back(self, update, context):
        """Go back to the previous step."""
        user_id = update.effective_user.id
        
        if user_id not in self.user_states:
            return
            
        state = self.user_states[user_id]
        
        # Check if we have a history
        if len(state['step_history']) > 1:
            # Remove current step from history and go back to previous one
            state['step_history'].pop()  # Remove current step
            prev_step_id = state['step_history'][-1]  # Get the previous step
            state['current_step_id'] = prev_step_id
            
            await self.display_current_step(update, context)
        else:
            await update.message.reply_text("–¢—ã —É–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–º —à–∞–≥–µ –∫–≤–µ—Å—Ç–∞!")

    def run(self):
        """Run the bot."""
        logger.info("KidQuestBot started.")
        # This would normally start the Telegram bot in a real implementation

# Create a global instance of the bot
bot = KidQuestBot()